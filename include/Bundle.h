#ifndef BUNDLE_H
#define BUNDLE_H


///

#include "ngl/Quaternion.h"
#include "RibbonManager.h"
#include "Ribbon.h"

class Ribbon;
class RibbonManager;

/// @file Bundle.h
/// @brief An abstract class for managing collections of ribbons.
/// @author Peter Matev
/// @version 1.0
/// @date 29/03/2012
/// Revision History :
/// Initial Version 29/03/2012
/// @class Bundle
/// @brief This abstract class defines a base for managing a collection of ribbons.
class Bundle
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief define different types of bundle
    //----------------------------------------------------------------------------------------------------------------------
    enum TYPE {SOLO, BRANCH, DIRECTED};

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for Bundle
    /// @param [in] _id unique id integer
    /// @param [in] _parent parent RibbonManager
    //----------------------------------------------------------------------------------------------------------------------
    Bundle(int _id, RibbonManager *_parent);
    ~Bundle();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pure virtual function to update all the ribbons in the bundle
    //----------------------------------------------------------------------------------------------------------------------
    virtual void update() =0;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief virtual function to draw all the ribbons in the bundle
    //----------------------------------------------------------------------------------------------------------------------
    virtual void draw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief virtual function to draw the local Axis
    //----------------------------------------------------------------------------------------------------------------------
    virtual void drawAxis();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the time (via the parent's getTime())
    //----------------------------------------------------------------------------------------------------------------------
    int getTime();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get a pointer to the camera
    //----------------------------------------------------------------------------------------------------------------------
    Camera* getCam();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get a pointer to my std::vector of ribbons
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector<Ribbon*>* getRibbons(){return &m_ribbons;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get current position
    //----------------------------------------------------------------------------------------------------------------------
    inline const ngl::Vector getPos(){return m_pos;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get current velocity
    //----------------------------------------------------------------------------------------------------------------------
    inline const ngl::Vector getVel(){return m_vel;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get current acceleration
    //----------------------------------------------------------------------------------------------------------------------
    inline const ngl::Vector getAcc(){return m_acc;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the radius of the bundle
    //----------------------------------------------------------------------------------------------------------------------
    inline float getRadius(){return m_radius;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the twist value
    //----------------------------------------------------------------------------------------------------------------------
    inline float getTwist(){return m_twist;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the strength of the spring constant
    //----------------------------------------------------------------------------------------------------------------------
    inline float getSpringStrength(){return m_springStrength;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the rotation quaternion
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Quaternion getRotQuat(){return m_rotQuat;}


    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set position
    /// @param [in] _v position vector
    //----------------------------------------------------------------------------------------------------------------------
    inline void setPos(const ngl::Vector &_v){m_pos = _v;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set velocity
    /// @param [in] _v velocity vector
    //----------------------------------------------------------------------------------------------------------------------
    inline void setVel(const ngl::Vector &_v){m_vel = _v;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set acceleration
    /// @param [in] _v acceleration vector
    //----------------------------------------------------------------------------------------------------------------------
    inline void setAcc(const ngl::Vector &_v){m_acc = _v;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set radius
    /// @param [in] _r radius
    //----------------------------------------------------------------------------------------------------------------------
    inline void setRadius(const float &_r){m_radius = _r;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set twist
    /// @param [in] _t twist
    //----------------------------------------------------------------------------------------------------------------------
    inline void setTwist(const float &_t){m_twist = _t;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set spring strength
    /// @param [in] _v strenght
    //----------------------------------------------------------------------------------------------------------------------
    inline void setSpringStrength(float _x){m_springStrength = _x;}

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the type of bundle e.g. SOLO, BRANCH, DIRECTED etc.
    //----------------------------------------------------------------------------------------------------------------------
    inline int getType(){return m_type;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set Bundle ID
    /// @param [in] _id unique integer ID
    //----------------------------------------------------------------------------------------------------------------------
    inline void setID(const int&_id){m_id = _id;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get Bundle ID
    //----------------------------------------------------------------------------------------------------------------------
    inline int getID(){return m_id;}

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the shading style by passing in an enum value e.g. PHONG, SURFACE
    /// @param [in] _id position vector
    //----------------------------------------------------------------------------------------------------------------------
    void setShadingType(const int &_id);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create a ribbon and add it to the current bundle
    /// @param [in] _id unique integer id
    /// @param [in] _c colour value
    /// @param [in] _l length
    /// @param [in] _w width
    //----------------------------------------------------------------------------------------------------------------------
    void createRibbon(const int &_id, const ngl::Colour &_c, const int &_l, const float &_w);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add a Ribbon to the current bundle
    /// @param [in] _r pointer to the ribbon to add
    //----------------------------------------------------------------------------------------------------------------------
    void addRibbon(Ribbon *_r);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief remove a Ribbon with given id
    /// @param [in] _id unique integer id
    //----------------------------------------------------------------------------------------------------------------------
    void removeRibbon(const int _id);

protected:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to the parent RibbonManager
    //----------------------------------------------------------------------------------------------------------------------
    RibbonManager *m_parent;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief list of pointers to ribbons
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Ribbon*> m_ribbons;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to local axis
    //----------------------------------------------------------------------------------------------------------------------
    Axis *m_axis;


    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the type of Bundle e.g. SOLO, BRANCH etc
    //----------------------------------------------------------------------------------------------------------------------
    int m_type;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief unique id
    //----------------------------------------------------------------------------------------------------------------------
    int m_id;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief radius of bundle /* currently unused */
    //----------------------------------------------------------------------------------------------------------------------
    float m_radius;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief twist of the entire bundle
    //----------------------------------------------------------------------------------------------------------------------
    float m_twist;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief constant in the spring force attracting ribbons towards the center of the bundle
    //----------------------------------------------------------------------------------------------------------------------
    float m_springStrength;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief bundle tip position
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vector m_pos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief bundle tip velocity
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vector m_vel;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief bundle tip acceleration
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vector m_acc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief rotation quaternion to rotate ribbons by twist
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Quaternion m_rotQuat;
};

#endif // BUNDLE_H
