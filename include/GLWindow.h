#ifndef __GL_WINDOW_H__
#define __GL_WINDOW_H__


#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/TransformStack.h>
#include "ngl/VAOPrimitives.h"
#include <ngl/Text.h>
// must be included after our stuff becuase GLEW needs to be first
#include <QtOpenGL>
#include <QTime>
#include "Camera.h"
#include "Axis.h"
#include "Ribbon.h"
#include "RibbonManager.h"

class RibbonManager;

/// @file GLWindow.h
/// @brief The OpenGL drawing class. Also handles most key press event.
/// @author Peter Matev (based on Jon Macey's GLWindow from SimpleNGL)
/// @version 1.0
/// @date 29/03/2012
/// Revision History :
/// Initial Version 29/03/2012
/// @class GLWindow
/// @brief QGLWidget for all the drawing to OpenGL. Handles key press event for
/// toggling shading modes and firing events. Contains a RibbonManager as the main access
/// point to the bundles and ribbons.
class GLWindow : public QGLWidget
{
Q_OBJECT        // must include this if you use Qt signals/slots
public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for GLWindow
    /// @param [in] _parent the parent window to create the GL context in
    //----------------------------------------------------------------------------------------------------------------------
    GLWindow(
              QWidget *_parent
            );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~GLWindow();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief return screen width
    //----------------------------------------------------------------------------------------------------------------------
    inline int getScreenWidth(){return m_screenWidth;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief return screen height
    //----------------------------------------------------------------------------------------------------------------------
    inline int getScreenHeight(){return m_screenHeight;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief return pointer to my camera
    //----------------------------------------------------------------------------------------------------------------------
    inline Camera* getCam(){return m_myCam; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get current time
    //----------------------------------------------------------------------------------------------------------------------
    inline int getTime(){return m_time;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get pointer to RibbonManager
    //----------------------------------------------------------------------------------------------------------------------
    inline RibbonManager* getRibbonManager(){return m_RM;}

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle wireframe shading
    //----------------------------------------------------------------------------------------------------------------------
    inline void toggleWireframe(){WIREFRAME ^= true;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle heads-up-display help
    //----------------------------------------------------------------------------------------------------------------------
    inline void toggleHelp(){HUD ^= true;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle normal shading
    //----------------------------------------------------------------------------------------------------------------------
    inline void toggleNormals(){NORMALS ^= true;}

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get whether normal shading is on
    //----------------------------------------------------------------------------------------------------------------------
    inline bool getNORMALS(){return NORMALS;}

    void reset();


private :

    /// @brief flag to indicate if the left mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the middle mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_track;
    /// @brief flag to indicate if the right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_dolly;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_mouseX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_mouseY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_oldMouseX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_oldMouseY;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief World Axis
    //----------------------------------------------------------------------------------------------------------------------
    Axis *m_axis;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Ribbon Manager
    //----------------------------------------------------------------------------------------------------------------------
    RibbonManager *m_RM;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief state of wireframe shading
    //----------------------------------------------------------------------------------------------------------------------
    bool WIREFRAME;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief state of normals shading
    //----------------------------------------------------------------------------------------------------------------------
    bool NORMALS;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief state of HUD
    //----------------------------------------------------------------------------------------------------------------------
    bool HUD;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief state of program (is running)
    //----------------------------------------------------------------------------------------------------------------------
    bool PAUSED;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vector m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the increment for x/y translation with mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    const static float INCREMENT=0.01;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the increment for the wheel zoom
    //----------------------------------------------------------------------------------------------------------------------
    const static float ZOOM=0.1;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a simple light use to illuminate the screen
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Light *m_light;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ngl text drawing in opengl
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Text *m_text;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief fires on every frame (triggers update())
    //----------------------------------------------------------------------------------------------------------------------
    int m_timer;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current frame number
    //----------------------------------------------------------------------------------------------------------------------
    int m_time;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief my camera
    //----------------------------------------------------------------------------------------------------------------------
    Camera *m_myCam;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief variable to store screen width
    //----------------------------------------------------------------------------------------------------------------------
    int m_screenWidth;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief variable to store screen height
    //----------------------------------------------------------------------------------------------------------------------
    int m_screenHeight;

    QSet<Qt::Key> m_keysPressed;


protected:

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load the light to the Phong shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadLightToPhongShader(ngl::Light *_light);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load the transform matrix stack to the Phong shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToPhongShader(
                               ngl::TransformStack &_tx
                              );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  The following methods must be implemented in the sub class
    /// this is called when the window is created
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called whenever the window is re-sized
    /// @param[in] _w the width of the resized window
    /// @param[in] _h the height of the resized window
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(
                    const int _w,
                    const int _h
                  );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is the main gl drawing routine which is called whenever the window needs to
    /// be re-drawn
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();

protected :

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (
                          QMouseEvent * _event
                        );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent (
                            QMouseEvent *_event
                         );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent (
                            QMouseEvent *_event
                            );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent(
                      QWheelEvent *_event
                   );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called whenever the a timer fires
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent(
                      QTimerEvent *_event
                     );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called when a key is pressed down
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called when a key is released
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void keyReleaseEvent(QKeyEvent *_event);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called when the frame timer fires
    /// and increments the frame count by one
    //----------------------------------------------------------------------------------------------------------------------
    inline void incrementTime(){m_time+=1;}

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called when the spacebar is hit
    //----------------------------------------------------------------------------------------------------------------------
    void spacebarEvent();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called when the enter key is hit
    //----------------------------------------------------------------------------------------------------------------------
    void enterEvent();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to cycle through the bundles and follow them.
    /// Called when the TAB key is hit
    //----------------------------------------------------------------------------------------------------------------------
    void switchFollowTarget();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method handles the key press events of the arrow keys
    /// and move the current bundle relative to the screen
    //----------------------------------------------------------------------------------------------------------------------
    void moveBundle();


};

#endif
