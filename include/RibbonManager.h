#ifndef RIBBONMANAGER_H
#define RIBBONMANAGER_H



#include <vector>
#include "Bundle.h"
#include "Camera.h"
#include "GLWindow.h"
#include "Ribbon.h"

class Bundle;

/// @file RibbonManager.h
/// @brief A class to manage the creation and life of both Bundles and Ribbons.
/// @author Peter Matev
/// @version 1.0
/// @date 29/03/2012
/// Revision History :
/// Initial Version 29/03/2012
/// @class RibbonManager
/// @brief Creates Bundles and Ribbons and manages their connections.
/// Functionality for splitting bundles into two or more smaller bundles and redistrubuting
/// ribbons across them. Contains functions for generating random colours and random vectors.
class RibbonManager
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for RibbonManager
    /// @param [in] _c camera
    /// @param [in] _p GLWindow parent
    //----------------------------------------------------------------------------------------------------------------------
    RibbonManager(Camera *_c, GLWindow *_p);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~RibbonManager();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get camera
    //----------------------------------------------------------------------------------------------------------------------
    inline Camera* getCam(){return m_cam;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set camera
    //----------------------------------------------------------------------------------------------------------------------
    inline void setCam(Camera *_c){m_cam = _c;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set parent GLWindow
    //----------------------------------------------------------------------------------------------------------------------
    inline void setParent(GLWindow *_p){m_parent = _p;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get parent
    //----------------------------------------------------------------------------------------------------------------------
    inline GLWindow* getParent(){return m_parent;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get bundle with give id
    //----------------------------------------------------------------------------------------------------------------------
    inline Bundle* getBundle(int _id){return m_bundles.at(_id);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief return the index of the given bundle in the std::vector
    //----------------------------------------------------------------------------------------------------------------------
    int getPosInList(Bundle *_b);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get pointer to std::Vector of bundles
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector<Bundle*>* getBundles(){return &m_bundles;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the id of the last ribbon which was created
    //----------------------------------------------------------------------------------------------------------------------
    inline int getLastRibbonID(){return m_lastRibbonID;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the id of the last bundle which was created
    //----------------------------------------------------------------------------------------------------------------------
    inline int getLastBundleID(){return m_lastBundleID;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief return the time
    //----------------------------------------------------------------------------------------------------------------------
    int getTime();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create a ribbon and attach it to given bundle
    //----------------------------------------------------------------------------------------------------------------------
    void createRibbon(Bundle *_bundle);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief spawn x random ribbons
    /// @param [in] _num number of ribbons to create
    /// @param [in] _bundle the parent bundle to attach the new ribbons to
    //----------------------------------------------------------------------------------------------------------------------
    void createRandomRibbons(const int &_num, Bundle *_bundle);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create blank branch bundle
    /// @param [in] _id unique id
    /// @param [in] _s start position
    /// @param [in] _e end position
    /// @param [in] _startFrame frame to start animation on
    /// @param [in] _frames number of frames anmation lasts
    //----------------------------------------------------------------------------------------------------------------------
    Bundle* createBranch(const int &_id, const ngl::Vector &_s, const ngl::Vector &_e, const float &_startFrame, const float &_frames);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create blank directed bundle
    /// @param [in] _pos start position
    /// @param [in] _vel start velocity
    //----------------------------------------------------------------------------------------------------------------------
    Bundle* createDirectedBundle(const ngl::Vector &_pos, const ngl::Vector _vel);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create solo bundle
    //----------------------------------------------------------------------------------------------------------------------
    Bundle* createSolo();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief destroy given bundle and remove from all vectors
    /// @param [in] _b Bundle to delete
    //----------------------------------------------------------------------------------------------------------------------
    void deleteBundle(Bundle *_b);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create random ngl::Colour
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Colour createRandColour();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create random ngl::Vector
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vector createRandVector(int _seed);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enable Phong Shading
    //----------------------------------------------------------------------------------------------------------------------
    void enablePhongShading();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enable Surface Shading
    //----------------------------------------------------------------------------------------------------------------------
    void enableSurfaceShading();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief bring all bundles back towards the origin /* NOT IMPLEMENTED */
    //----------------------------------------------------------------------------------------------------------------------
    void homeBundles();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief split input bundle into x number of output bundles
    /// @param [in] _in bundle to split
    /// @param [in] _outBundles vector of bundles to split ribbons between
    //----------------------------------------------------------------------------------------------------------------------
    void splitBundle(Bundle* _in, std::vector<Bundle*> _outBundles);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief call update on all bundles
    //----------------------------------------------------------------------------------------------------------------------
    void updateBundles();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief call draw on all bundles
    //----------------------------------------------------------------------------------------------------------------------
    void drawBundles();


protected:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief GLWindow parent
    //----------------------------------------------------------------------------------------------------------------------
    GLWindow *m_parent;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Camera
    //----------------------------------------------------------------------------------------------------------------------
    Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief vector of all existing bundles
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Bundle*> m_bundles;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief id of last created bundle
    //----------------------------------------------------------------------------------------------------------------------
    int m_lastBundleID;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief id of last created ribbon
    //----------------------------------------------------------------------------------------------------------------------
    int m_lastRibbonID;
};

#endif // RIBBONMANAGER_H
